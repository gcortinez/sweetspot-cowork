generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model access_code_usage {
  id                   String               @id
  accessCodeId         String
  usedBy               String?
  visitorId            String?
  usedAt               DateTime             @default(now())
  location             String?
  accessPoint          String?
  ipAddress            String?
  deviceInfo           Json?                @default("{}")
  userAgent            String?
  success              Boolean              @default(true)
  accessGranted        Boolean              @default(true)
  failureReason        String?
  metadata             Json?                @default("{}")
  notes                String?
  visitor_access_codes visitor_access_codes @relation(fields: [accessCodeId], references: [id], onDelete: Cascade)
  users                users?               @relation(fields: [usedBy], references: [id])
  visitors             visitors?            @relation(fields: [visitorId], references: [id])

  @@index([accessCodeId, usedAt])
}

model access_logs {
  id           String        @id
  tenantId     String
  userId       String?
  visitorId    String?
  zoneId       String?
  action       AccessAction
  location     String?
  timestamp    DateTime      @default(now())
  metadata     Json?         @default("{}")
  tenants      tenants       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users        users?        @relation(fields: [userId], references: [id])
  visitors     visitors?     @relation(fields: [visitorId], references: [id])
  access_zones access_zones? @relation(fields: [zoneId], references: [id])
}

model access_rules {
  id                String              @id
  tenantId          String
  name              String
  description       String?
  zoneId            String?
  membershipTypes   Json                @default("[]")
  planTypes         Json                @default("[]")
  userRoles         Json                @default("[]")
  timeRestrictions  Json                @default("{}")
  dayRestrictions   Json                @default("[]")
  maxOccupancy      Int?
  requiresApproval  Boolean             @default(false)
  isActive          Boolean             @default(true)
  priority          Int                 @default(0)
  validFrom         DateTime?
  validTo           DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  tenants           tenants             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  access_zones      access_zones?       @relation(fields: [zoneId], references: [id])
  access_violations access_violations[]

  @@index([tenantId, isActive])
}

model access_violations {
  id            String            @id
  tenantId      String
  userId        String?
  visitorId     String?
  ruleId        String
  violationType ViolationType
  description   String
  severity      ViolationSeverity @default(LOW)
  location      String?
  resolved      Boolean           @default(false)
  resolvedBy    String?
  resolvedAt    DateTime?
  metadata      Json              @default("{}")
  createdAt     DateTime          @default(now())
  access_rules  access_rules      @relation(fields: [ruleId], references: [id])
  tenants       tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users         users?            @relation(fields: [userId], references: [id])
  visitors      visitors?         @relation(fields: [visitorId], references: [id])

  @@index([resolved])
  @@index([tenantId, createdAt])
}

model access_zones {
  id                 String               @id
  tenantId           String
  name               String
  description        String?
  zoneType           AccessZoneType       @default(GENERAL)
  restrictions       Json                 @default("{}")
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  access_logs        access_logs[]
  access_rules       access_rules[]
  tenants            tenants              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  occupancy_tracking occupancy_tracking[]
}

model activities {
  id            String         @id
  tenantId      String
  type          ActivityType
  subject       String
  description   String?
  clientId      String?
  leadId        String?
  opportunityId String?
  userId        String
  dueDate       DateTime?
  completedAt   DateTime?
  outcome       String?
  duration      Int?
  location      String?
  metadata      Json?          @default("{}")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  sortOrder     Int?           @default(0)
  clients       clients?       @relation(fields: [clientId], references: [id])
  leads         leads?         @relation(fields: [leadId], references: [id])
  opportunities opportunities? @relation(fields: [opportunityId], references: [id])
  tenants       tenants        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users         users          @relation(fields: [userId], references: [id])

  @@index([tenantId, type])
  @@index([userId, dueDate])
}

model audit_logs {
  id         String      @id
  tenantId   String
  userId     String?
  action     AuditAction
  entityType String
  entityId   String?
  oldValues  Json?       @default("{}")
  newValues  Json?       @default("{}")
  ipAddress  String?
  userAgent  String?
  requestId  String?
  details    Json?       @default("{}")
  timestamp  DateTime    @default(now())
  tenants    tenants     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users      users?      @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([tenantId, timestamp])
  @@index([userId, timestamp])
}

model billing_cycle_configs {
  id              String          @id
  tenantId        String
  name            String
  description     String?
  cycle           BillingCycle
  dayOfMonth      Int?
  dayOfWeek       Int?
  cutoffDays      Int             @default(0)
  gracePeriodDays Int             @default(0)
  autoGenerate    Boolean         @default(true)
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  tenants         tenants         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  subscriptions   subscriptions[]

  @@unique([tenantId, name])
}

model billing_settings {
  id                   String   @id
  tenantId             String   @unique
  currency             String   @default("USD")
  timezone             String   @default("UTC")
  taxRate              Decimal  @default(0) @db.Decimal(5, 4)
  taxIncluded          Boolean  @default(false)
  invoicePrefix        String   @default("INV")
  invoiceNumberStart   Int      @default(1000)
  paymentTermsDays     Int      @default(30)
  latePaymentFee       Decimal  @default(0) @db.Decimal(10, 2)
  latePaymentFeeType   FeeType  @default(FIXED)
  autoGenerateInvoices Boolean  @default(true)
  autoSendInvoices     Boolean  @default(false)
  autoCollectPayments  Boolean  @default(false)
  retryFailedPayments  Boolean  @default(true)
  maxRetryAttempts     Int      @default(3)
  retryIntervalDays    Int      @default(7)
  gracePeriodDays      Int      @default(7)
  dunningEnabled       Boolean  @default(true)
  emailTemplates       Json     @default("{}")
  webhookUrls          Json     @default("[]")
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  tenants              tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model booking_approvals {
  id          String         @id
  tenantId    String
  bookingId   String         @unique
  approverId  String?
  status      ApprovalStatus @default(PENDING)
  requestedAt DateTime       @default(now())
  reviewedAt  DateTime?
  reason      String?
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime
  users       users?         @relation(fields: [approverId], references: [id])
  bookings    bookings       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  tenants     tenants        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model bookings {
  id                String             @id
  tenantId          String
  spaceId           String
  userId            String
  title             String
  description       String?
  startTime         DateTime
  endTime           DateTime
  status            BookingStatus      @default(CONFIRMED)
  cost              Decimal?           @db.Decimal(10, 2)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  booking_approvals booking_approvals?
  spaces            spaces             @relation(fields: [spaceId], references: [id])
  tenants           tenants            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users             users              @relation(fields: [userId], references: [id])
  room_check_ins    room_check_ins[]
}

model budget_expenses {
  id                String        @id
  budgetPlanId      String
  category          String
  subcategory       String?
  description       String
  plannedAmount     Decimal       @db.Decimal(10, 2)
  actualAmount      Decimal       @default(0) @db.Decimal(10, 2)
  variance          Decimal       @default(0) @db.Decimal(10, 2)
  variancePercent   Decimal       @default(0) @db.Decimal(5, 2)
  monthlyAllocation Json          @default("{}")
  responsible       String?
  notes             String?
  status            ExpenseStatus @default(PLANNED)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  budget_plans      budget_plans  @relation(fields: [budgetPlanId], references: [id], onDelete: Cascade)
  users             users?        @relation(fields: [responsible], references: [id])

  @@index([budgetPlanId, category])
}

model budget_plans {
  id                                   String            @id
  tenantId                             String
  name                                 String
  description                          String?
  budgetYear                           Int
  budgetType                           BudgetType        @default(ANNUAL)
  totalBudget                          Decimal           @db.Decimal(12, 2)
  allocations                          Json              @default("{}")
  categories                           Json              @default("[]")
  departments                          Json              @default("[]")
  monthlyBreakdown                     Json              @default("{}")
  quarterlyTargets                     Json              @default("{}")
  actualSpending                       Decimal           @default(0) @db.Decimal(12, 2)
  variance                             Decimal           @default(0) @db.Decimal(12, 2)
  utilizationRate                      Decimal           @default(0) @db.Decimal(5, 2)
  status                               BudgetStatus      @default(DRAFT)
  approvedBy                           String?
  approvedAt                           DateTime?
  createdBy                            String
  createdAt                            DateTime          @default(now())
  updatedAt                            DateTime
  budget_expenses                      budget_expenses[]
  users_budget_plans_approvedByTousers users?            @relation("budget_plans_approvedByTousers", fields: [approvedBy], references: [id])
  users_budget_plans_createdByTousers  users             @relation("budget_plans_createdByTousers", fields: [createdBy], references: [id])
  tenants                              tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([tenantId, budgetYear])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model clients {
  id                     String                   @id
  tenantId               String
  name                   String
  email                  String
  phone                  String?
  address                String?
  taxId                  String?
  contactPerson          String?
  status                 ClientStatus             @default(LEAD)
  notes                  String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  company                String?
  activities             activities[]
  tenants                tenants                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  communications         communications[]
  contracts              contracts[]
  invoices               invoices[]
  lead_conversions       lead_conversions[]
  leads                  leads[]
  memberships            memberships[]
  opportunities          opportunities[]
  payments               payments[]
  quotations             quotations[]
  stored_payment_methods stored_payment_methods[]
  subscriptions          subscriptions[]
  tasks                  tasks[]
  usage_records          usage_records[]
  users                  users[]

  @@unique([tenantId, email])
}

model communications {
  id            String            @id
  tenantId      String
  type          CommunicationType
  direction     CommDirection
  subject       String
  content       String?
  fromEmail     String?
  toEmail       String?
  clientId      String?
  leadId        String?
  userId        String
  status        CommStatus        @default(PENDING)
  sentAt        DateTime?
  readAt        DateTime?
  metadata      Json?             @default("{}")
  attachments   Json?             @default("[]")
  createdAt     DateTime          @default(now())
  fromPhone     String?
  opportunityId String?
  toPhone       String?
  clients       clients?          @relation(fields: [clientId], references: [id])
  leads         leads?            @relation(fields: [leadId], references: [id])
  opportunities opportunities?    @relation(fields: [opportunityId], references: [id])
  tenants       tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users         users             @relation(fields: [userId], references: [id])

  @@index([clientId, createdAt])
  @@index([leadId, createdAt])
  @@index([opportunityId, createdAt])
  @@index([tenantId, type])
}

model contracts {
  id            String         @id
  tenantId      String
  clientId      String
  quotationId   String?        @unique
  number        String
  title         String
  startDate     DateTime
  endDate       DateTime?
  status        ContractStatus @default(DRAFT)
  terms         String?
  signedAt      DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  amount        Decimal        @db.Decimal(10, 2)
  autoRenew     Boolean        @default(false)
  createdBy     String
  currency      String         @default("USD")
  description   String?
  renewalPeriod String?
  clients       clients        @relation(fields: [clientId], references: [id])
  quotations    quotations?    @relation(fields: [quotationId], references: [id])
  tenants       tenants        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  memberships   memberships[]

  @@unique([tenantId, number])
}

model discount_codes {
  id           String       @id
  tenantId     String
  code         String
  name         String
  description  String?
  discountType DiscountType
  value        Decimal      @db.Decimal(10, 2)
  minAmount    Decimal?     @db.Decimal(10, 2)
  maxDiscount  Decimal?     @db.Decimal(10, 2)
  usageLimit   Int?
  usageCount   Int          @default(0)
  validFrom    DateTime
  validTo      DateTime
  applicableTo Json         @default("[]")
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  tenants      tenants      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, code])
}

model financial_dashboards {
  id              String        @id
  tenantId        String
  dashboardType   DashboardType
  period          ReportPeriod
  startDate       DateTime
  endDate         DateTime
  kpis            Json          @default("{}")
  metrics         Json          @default("{}")
  charts          Json          @default("[]")
  alerts          Json          @default("[]")
  trends          Json          @default("{}")
  comparisons     Json          @default("{}")
  targets         Json          @default("{}")
  actuals         Json          @default("{}")
  variances       Json          @default("{}")
  insights        Json          @default("[]")
  lastRefreshed   DateTime      @default(now())
  refreshInterval Int           @default(3600)
  isAutoRefresh   Boolean       @default(true)
  customizations  Json          @default("{}")
  sharedWith      Json          @default("[]")
  isPublic        Boolean       @default(false)
  createdBy       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  users           users         @relation(fields: [createdBy], references: [id])
  tenants         tenants       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([lastRefreshed])
  @@index([tenantId, dashboardType])
}

model financial_reports {
  id          String              @id
  tenantId    String
  reportType  FinancialReportType
  period      ReportPeriod
  startDate   DateTime
  endDate     DateTime
  title       String
  description String?
  data        Json
  metadata    Json                @default("{}")
  status      ReportStatus        @default(GENERATING)
  generatedBy String
  generatedAt DateTime            @default(now())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime
  users       users               @relation(fields: [generatedBy], references: [id])
  tenants     tenants             @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([startDate, endDate])
  @@index([tenantId, reportType])
}

model invitations {
  id                String           @id
  email             String
  role              UserRole
  status            InvitationStatus @default(PENDING)
  clerkInvitationId String           @unique
  tenantId          String?
  invitedBy         String
  acceptedAt        DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  users             users            @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  tenants           tenants?         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([email, tenantId])
}

model invoice_items {
  id          String   @id
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  invoices    invoices @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model invoices {
  id            String          @id
  tenantId      String
  clientId      String
  number        String
  title         String?
  description   String?
  subtotal      Decimal         @db.Decimal(10, 2)
  tax           Decimal         @default(0) @db.Decimal(10, 2)
  total         Decimal         @db.Decimal(10, 2)
  currency      String          @default("USD")
  status        InvoiceStatus   @default(DRAFT)
  dueDate       DateTime
  paidAt        DateTime?
  createdById   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  invoice_items invoice_items[]
  clients       clients         @relation(fields: [clientId], references: [id])
  users         users           @relation(fields: [createdById], references: [id])
  tenants       tenants         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments      payments[]

  @@unique([tenantId, number])
}

model lead_conversions {
  id              String         @id
  tenantId        String
  leadId          String         @unique
  clientId        String
  opportunityId   String?
  convertedById   String
  conversionNotes String?
  createdAt       DateTime       @default(now())
  clients         clients        @relation(fields: [clientId], references: [id])
  users           users          @relation(fields: [convertedById], references: [id])
  leads           leads          @relation(fields: [leadId], references: [id])
  opportunities   opportunities? @relation(fields: [opportunityId], references: [id])
  tenants         tenants        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model leads {
  id                 String            @id
  tenantId           String
  clientId           String?
  firstName          String
  lastName           String
  email              String
  phone              String?
  company            String?
  position           String?
  source             LeadSource
  channel            String?
  budget             Decimal?          @db.Decimal(10, 2)
  interests          Json?             @default("[]")
  score              Int               @default(0)
  status             LeadStatus        @default(NEW)
  qualificationNotes String?
  assignedToId       String?
  lastContactAt      DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  activities         activities[]
  communications     communications[]
  lead_conversions   lead_conversions?
  users              users?            @relation(fields: [assignedToId], references: [id])
  clients            clients?          @relation(fields: [clientId], references: [id])
  tenants            tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  opportunities      opportunities[]
  quotations         quotations[]
  tasks              tasks[]

  @@index([assignedToId])
  @@index([tenantId, email])
  @@index([tenantId, status])
}

model memberships {
  id         String           @id
  tenantId   String
  clientId   String
  contractId String
  planId     String
  userId     String
  startDate  DateTime
  endDate    DateTime?
  status     MembershipStatus @default(ACTIVE)
  qrCode     String           @unique
  createdAt  DateTime         @default(now())
  updatedAt  DateTime
  clients    clients          @relation(fields: [clientId], references: [id])
  contracts  contracts        @relation(fields: [contractId], references: [id])
  plans      plans            @relation(fields: [planId], references: [id])
  tenants    tenants          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users      users            @relation(fields: [userId], references: [id])
}

model occupancy_tracking {
  id            String        @id
  tenantId      String
  zoneId        String?
  spaceId       String?
  currentCount  Int           @default(0)
  maxCapacity   Int
  lastEntry     DateTime?
  lastExit      DateTime?
  peakToday     Int           @default(0)
  peakThisWeek  Int           @default(0)
  peakThisMonth Int           @default(0)
  updatedAt     DateTime
  spaces        spaces?       @relation(fields: [spaceId], references: [id])
  tenants       tenants       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  access_zones  access_zones? @relation(fields: [zoneId], references: [id])

  @@unique([tenantId, zoneId, spaceId])
}

model opportunities {
  id                    String                  @id
  tenantId              String
  clientId              String?
  leadId                String?
  title                 String
  description           String?
  value                 Decimal                 @db.Decimal(10, 2)
  probability           Int                     @default(0)
  expectedRevenue       Decimal                 @db.Decimal(10, 2)
  stage                 PipelineStage
  expectedCloseDate     DateTime?
  actualCloseDate       DateTime?
  lostReason            String?
  competitorInfo        String?
  assignedToId          String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  activities            activities[]
  communications        communications[]
  lead_conversions      lead_conversions[]
  users                 users?                  @relation(fields: [assignedToId], references: [id])
  clients               clients?                @relation(fields: [clientId], references: [id])
  leads                 leads?                  @relation(fields: [leadId], references: [id])
  tenants               tenants                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  opportunity_documents opportunity_documents[]
  quotations            quotations[]
  tasks                 tasks[]

  @@index([assignedToId])
  @@index([tenantId, stage])
}

model opportunity_documents {
  id             String        @id
  tenantId       String
  opportunityId  String
  description    String?
  created_at     DateTime      @default(now())
  document_type  String        @default("general")
  file_name      String
  file_size      BigInt
  file_url       String
  is_active      Boolean       @default(true)
  mime_type      String
  original_name  String
  tags           String[]      @default([])
  updated_at     DateTime
  uploaded_at    DateTime      @default(now())
  uploaded_by_id String
  opportunities  opportunities @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  tenants        tenants       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users          users         @relation(fields: [uploaded_by_id], references: [id])

  @@index([document_type])
  @@index([is_active])
  @@index([tenantId, opportunityId])
  @@index([uploaded_by_id])
}

model payment_reconciliation_items {
  id                      String                  @id
  reconciliationId        String
  paymentId               String?
  transactionReference    String
  bankReference           String?
  amount                  Decimal                 @db.Decimal(10, 2)
  currency                String                  @default("USD")
  transactionDate         DateTime
  description             String?
  matchStatus             MatchStatus             @default(UNMATCHED)
  matchConfidence         Decimal                 @default(0) @db.Decimal(5, 2)
  matchedBy               String?
  matchedAt               DateTime?
  discrepancyType         DiscrepancyType?
  discrepancyAmount       Decimal?                @db.Decimal(10, 2)
  notes                   String?
  requiresAction          Boolean                 @default(false)
  metadata                Json                    @default("{}")
  createdAt               DateTime                @default(now())
  updatedAt               DateTime
  users                   users?                  @relation(fields: [matchedBy], references: [id])
  payments                payments?               @relation(fields: [paymentId], references: [id])
  payment_reconciliations payment_reconciliations @relation(fields: [reconciliationId], references: [id], onDelete: Cascade)

  @@index([reconciliationId, matchStatus])
  @@index([transactionReference])
}

model payment_reconciliations {
  id                                                String                         @id
  tenantId                                          String
  reconciliationType                                ReconciliationType
  period                                            ReportPeriod
  startDate                                         DateTime
  endDate                                           DateTime
  bankStatementTotal                                Decimal                        @db.Decimal(12, 2)
  recordedPaymentsTotal                             Decimal                        @db.Decimal(12, 2)
  variance                                          Decimal                        @db.Decimal(12, 2)
  status                                            ReconciliationStatus           @default(IN_PROGRESS)
  matchedTransactions                               Int                            @default(0)
  unmatchedTransactions                             Int                            @default(0)
  duplicateTransactions                             Int                            @default(0)
  missingTransactions                               Int                            @default(0)
  discrepancies                                     Json                           @default("[]")
  adjustments                                       Json                           @default("[]")
  notes                                             String?
  reconciliationRules                               Json                           @default("{}")
  autoMatchPercentage                               Decimal                        @default(0) @db.Decimal(5, 2)
  manualReview                                      Boolean                        @default(false)
  approvedBy                                        String?
  approvedAt                                        DateTime?
  reconciledBy                                      String
  reconciledAt                                      DateTime                       @default(now())
  createdAt                                         DateTime                       @default(now())
  updatedAt                                         DateTime
  payment_reconciliation_items                      payment_reconciliation_items[]
  users_payment_reconciliations_approvedByTousers   users?                         @relation("payment_reconciliations_approvedByTousers", fields: [approvedBy], references: [id])
  users_payment_reconciliations_reconciledByTousers users                          @relation("payment_reconciliations_reconciledByTousers", fields: [reconciledBy], references: [id])
  tenants                                           tenants                        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([startDate, endDate])
  @@index([tenantId, reconciliationType])
}

model payments {
  id                           String                         @id
  tenantId                     String
  clientId                     String
  invoiceId                    String?
  amount                       Decimal                        @db.Decimal(10, 2)
  currency                     String                         @default("USD")
  method                       PaymentMethod
  reference                    String?
  status                       PaymentStatus                  @default(PENDING)
  processedAt                  DateTime?
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime
  payment_reconciliation_items payment_reconciliation_items[]
  clients                      clients                        @relation(fields: [clientId], references: [id])
  invoices                     invoices?                      @relation(fields: [invoiceId], references: [id])
  tenants                      tenants                        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model plan_tiers {
  id            String        @id
  planId        String
  tierId        String
  basePrice     Decimal       @db.Decimal(10, 2)
  features      Json?         @default("[]")
  createdAt     DateTime      @default(now())
  plans         plans         @relation(fields: [planId], references: [id], onDelete: Cascade)
  pricing_tiers pricing_tiers @relation(fields: [tierId], references: [id], onDelete: Cascade)

  @@unique([planId, tierId])
}

model plans {
  id            String          @id
  tenantId      String
  name          String
  description   String?
  type          PlanType
  price         Decimal         @db.Decimal(10, 2)
  currency      String          @default("USD")
  billingCycle  BillingCycle
  features      Json?           @default("[]")
  maxUsers      Int?
  accessHours   Json?           @default("{}")
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  memberships   memberships[]
  plan_tiers    plan_tiers[]
  tenants       tenants         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  subscriptions subscriptions[]
}

model price_adjustments {
  id             String         @id
  tenantId       String
  name           String
  description    String?
  adjustmentType AdjustmentType
  targetType     String
  targetIds      Json           @default("[]")
  value          Decimal        @db.Decimal(10, 2)
  valueType      ValueType
  conditions     Json           @default("{}")
  priority       Int            @default(0)
  isActive       Boolean        @default(true)
  validFrom      DateTime?
  validTo        DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  tenants        tenants        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, isActive])
}

model pricing_rules {
  id            String          @id
  tenantId      String
  tierId        String
  name          String
  description   String?
  ruleType      PricingRuleType
  spaceType     SpaceType?
  planType      PlanType?
  timeSlots     Json?           @default("[]")
  conditions    Json            @default("{}")
  basePrice     Decimal         @db.Decimal(10, 2)
  modifier      Decimal         @default(1.0) @db.Decimal(3, 2)
  modifierType  ModifierType    @default(MULTIPLIER)
  isActive      Boolean         @default(true)
  validFrom     DateTime?
  validTo       DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  tenants       tenants         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pricing_tiers pricing_tiers   @relation(fields: [tierId], references: [id], onDelete: Cascade)

  @@index([tenantId, ruleType])
  @@index([tierId])
}

model pricing_tiers {
  id            String          @id
  tenantId      String
  name          String
  description   String?
  level         Int             @default(1)
  features      Json            @default("[]")
  restrictions  Json            @default("{}")
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  plan_tiers    plan_tiers[]
  pricing_rules pricing_rules[]
  tenants       tenants         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, level])
}

model profit_analyses {
  id                String       @id
  tenantId          String
  analysisType      AnalysisType
  period            ReportPeriod
  startDate         DateTime
  endDate           DateTime
  totalRevenue      Decimal      @db.Decimal(12, 2)
  totalCosts        Decimal      @db.Decimal(12, 2)
  grossProfit       Decimal      @db.Decimal(12, 2)
  grossMargin       Decimal      @db.Decimal(5, 2)
  operatingExpenses Decimal      @db.Decimal(12, 2)
  operatingProfit   Decimal      @db.Decimal(12, 2)
  operatingMargin   Decimal      @db.Decimal(5, 2)
  netProfit         Decimal      @db.Decimal(12, 2)
  netMargin         Decimal      @db.Decimal(5, 2)
  ebitda            Decimal      @db.Decimal(12, 2)
  costBreakdown     Json         @default("{}")
  revenueBreakdown  Json         @default("{}")
  profitTrends      Json         @default("{}")
  marginAnalysis    Json         @default("{}")
  benchmarks        Json         @default("{}")
  kpis              Json         @default("{}")
  insights          Json         @default("[]")
  recommendations   Json         @default("[]")
  createdBy         String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime
  users             users        @relation(fields: [createdBy], references: [id])
  tenants           tenants      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([startDate, endDate])
  @@index([tenantId, analysisType])
}

model qr_code_scans {
  id         String     @id
  tenantId   String
  qrCodeId   String
  userId     String?
  visitorId  String?
  location   String?
  deviceInfo Json?      @default("{}")
  result     ScanResult
  reason     String?
  metadata   Json       @default("{}")
  scannedAt  DateTime   @default(now())
  qr_codes   qr_codes   @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
  tenants    tenants    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users      users?     @relation(fields: [userId], references: [id])
  visitors   visitors?  @relation(fields: [visitorId], references: [id])

  @@index([qrCodeId])
  @@index([tenantId, scannedAt])
}

model qr_codes {
  id            String          @id
  tenantId      String
  code          String          @unique
  type          QRCodeType
  userId        String?
  visitorId     String?
  metadata      Json            @default("{}")
  permissions   Json            @default("[]")
  validFrom     DateTime
  validUntil    DateTime
  maxScans      Int?
  currentScans  Int             @default(0)
  status        QRCodeStatus    @default(ACTIVE)
  lastUsedAt    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  qr_code_scans qr_code_scans[]
  tenants       tenants         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users         users?          @relation(fields: [userId], references: [id])
  visitors      visitors?       @relation(fields: [visitorId], references: [id])

  @@index([tenantId, type])
  @@index([validFrom, validUntil])
}

model quotation_items {
  id          String     @id
  quotationId String
  description String
  quantity    Int
  unitPrice   Decimal    @db.Decimal(10, 2)
  total       Decimal    @db.Decimal(10, 2)
  createdAt   DateTime   @default(now())
  quotations  quotations @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model quotations {
  id              String            @id
  tenantId        String
  clientId        String
  number          String
  title           String
  description     String?
  subtotal        Decimal           @db.Decimal(10, 2)
  total           Decimal           @db.Decimal(10, 2)
  validUntil      DateTime
  status          QuotationStatus   @default(DRAFT)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  opportunityId   String?
  leadId          String?
  approvedAt      DateTime?
  approvedBy      String?
  createdBy       String
  currency        String            @default("USD")
  discounts       Decimal           @default(0) @db.Decimal(10, 2)
  taxes           Decimal           @default(0) @db.Decimal(10, 2)
  contracts       contracts?
  quotation_items quotation_items[]
  clients         clients           @relation(fields: [clientId], references: [id])
  leads           leads?            @relation(fields: [leadId], references: [id])
  opportunities   opportunities?    @relation(fields: [opportunityId], references: [id])
  tenants         tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, number])
}

model recurring_invoices {
  id                   String                 @id
  tenantId             String
  subscriptionId       String
  templateName         String
  description          String?
  nextGeneration       DateTime
  lastGenerated        DateTime?
  frequency            BillingCycle
  dayOfMonth           Int?
  dayOfWeek            Int?
  status               RecurringInvoiceStatus @default(ACTIVE)
  autoSend             Boolean                @default(true)
  includePreviousUsage Boolean                @default(true)
  metadata             Json                   @default("{}")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  subscriptions        subscriptions          @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  tenants              tenants                @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([tenantId, nextGeneration])
}

model revenue_forecasts {
  id               String         @id
  tenantId         String
  forecastType     ForecastType
  period           ForecastPeriod
  startDate        DateTime
  endDate          DateTime
  baseRevenue      Decimal        @db.Decimal(12, 2)
  projectedRevenue Decimal        @db.Decimal(12, 2)
  confidence       Decimal        @db.Decimal(5, 2)
  methodology      ForecastMethod
  parameters       Json           @default("{}")
  assumptions      Json           @default("[]")
  risks            Json           @default("[]")
  trends           Json           @default("{}")
  seasonality      Json           @default("{}")
  accuracy         Decimal?       @db.Decimal(5, 2)
  status           ForecastStatus @default(ACTIVE)
  notes            String?
  createdBy        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  users            users          @relation(fields: [createdBy], references: [id])
  tenants          tenants        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([startDate, endDate])
  @@index([tenantId, forecastType])
}

model room_availability {
  id             String         @id
  tenantId       String
  spaceId        String
  dayOfWeek      Int
  startTime      String
  endTime        String
  isAvailable    Boolean        @default(true)
  recurrenceType RecurrenceType @default(WEEKLY)
  effectiveFrom  DateTime       @default(now())
  effectiveTo    DateTime?
  reason         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  spaces         spaces         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  tenants        tenants        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([dayOfWeek, isAvailable])
  @@index([tenantId, spaceId])
}

model room_check_ins {
  id            String    @id
  tenantId      String
  bookingId     String
  userId        String
  spaceId       String
  checkedInAt   DateTime  @default(now())
  checkedOutAt  DateTime?
  qrCodeUsed    String?
  actualEndTime DateTime?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  bookings      bookings  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  spaces        spaces    @relation(fields: [spaceId], references: [id])
  tenants       tenants   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users         users     @relation(fields: [userId], references: [id])

  @@index([bookingId])
  @@index([tenantId, spaceId])
}

model room_features {
  id             String           @id
  tenantId       String
  name           String
  description    String?
  category       FeatureCategory
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  tenants        tenants          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  space_features space_features[]

  @@unique([tenantId, name])
}

model room_maintenance_logs {
  id              String            @id
  tenantId        String
  spaceId         String
  maintenanceType MaintenanceType
  title           String
  description     String?
  scheduledAt     DateTime
  completedAt     DateTime?
  performedBy     String?
  cost            Decimal?          @db.Decimal(10, 2)
  status          MaintenanceStatus @default(SCHEDULED)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  spaces          spaces            @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  tenants         tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([status, scheduledAt])
  @@index([tenantId, spaceId])
}

model room_pricing_rules {
  id            String            @id
  tenantId      String
  spaceId       String?
  name          String
  description   String?
  ruleType      PricingRuleType
  conditions    Json              @default("{}")
  basePrice     Decimal?          @db.Decimal(10, 2)
  priceModifier Decimal           @default(1.0) @db.Decimal(5, 4)
  modifierType  PriceModifierType @default(MULTIPLIER)
  priority      Int               @default(1)
  isActive      Boolean           @default(true)
  validFrom     DateTime?
  validTo       DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime
  spaces        spaces?           @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  tenants       tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([spaceId])
  @@index([tenantId, isActive, priority])
}

model room_usage_analytics {
  id              String   @id
  tenantId        String
  spaceId         String
  date            DateTime
  totalBookings   Int      @default(0)
  totalHours      Decimal  @default(0) @db.Decimal(8, 2)
  utilizationRate Decimal  @default(0) @db.Decimal(5, 4)
  revenue         Decimal  @default(0) @db.Decimal(10, 2)
  noShowCount     Int      @default(0)
  averageRating   Decimal? @db.Decimal(3, 2)
  peakHourStart   String?
  peakHourEnd     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  spaces          spaces   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  tenants         tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, spaceId, date])
  @@index([date])
}

model security_events {
  id                                         String            @id
  tenantId                                   String
  eventType                                  SecurityEventType
  severity                                   SecuritySeverity  @default(LOW)
  source                                     String?
  ipAddress                                  String?
  userAgent                                  String?
  performedById                              String?
  targetUserId                               String?
  description                                String
  metadata                                   Json              @default("{}")
  resolved                                   Boolean           @default(false)
  resolvedAt                                 DateTime?
  resolvedBy                                 String?
  timestamp                                  DateTime          @default(now())
  users_security_events_performedByIdTousers users?            @relation("security_events_performedByIdTousers", fields: [performedById], references: [id])
  users_security_events_targetUserIdTousers  users?            @relation("security_events_targetUserIdTousers", fields: [targetUserId], references: [id])
  tenants                                    tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([eventType, severity])
  @@index([resolved])
  @@index([tenantId, timestamp])
}

model service_consumptions {
  id        String   @id
  tenantId  String
  serviceId String
  userId    String
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  date      DateTime @default(now())
  invoiced  Boolean  @default(false)
  createdAt DateTime @default(now())
  services  services @relation(fields: [serviceId], references: [id])
  tenants   tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id])
}

model service_providers {
  id              String   @id
  tenantId        String
  serviceId       String
  name            String
  contactEmail    String
  contactPhone    String?
  description     String?
  logo            String?
  capabilities    Json?    @default("[]")
  workingHours    Json?    @default("{}")
  serviceAreas    Json?    @default("[]")
  rating          Decimal? @db.Decimal(3, 2)
  totalJobs       Int      @default(0)
  completedJobs   Int      @default(0)
  responseTimeAvg Int?
  isActive        Boolean  @default(true)
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  services        services @relation(fields: [serviceId], references: [id])
  tenants         tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model service_request_status_history {
  id               String           @id
  serviceRequestId String
  status           RequestStatus
  changedBy        String
  reason           String?
  notes            String?
  timestamp        DateTime         @default(now())
  users            users            @relation(fields: [changedBy], references: [id])
  service_requests service_requests @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

model service_requests {
  id                                       String                           @id
  tenantId                                 String
  serviceId                                String
  userId                                   String
  requestedBy                              String
  quantity                                 Int                              @default(1)
  totalAmount                              Decimal                          @db.Decimal(10, 2)
  priority                                 RequestPriority                  @default(NORMAL)
  status                                   RequestStatus                    @default(PENDING)
  requestedDeliveryTime                    DateTime?
  scheduledDeliveryTime                    DateTime?
  actualDeliveryTime                       DateTime?
  notes                                    String?
  customizations                           Json?                            @default("{}")
  attachments                              Json?                            @default("[]")
  requiresApproval                         Boolean                          @default(false)
  approvedBy                               String?
  approvedAt                               DateTime?
  rejectionReason                          String?
  assignedTo                               String?
  progressNotes                            String?
  completedAt                              DateTime?
  createdAt                                DateTime                         @default(now())
  updatedAt                                DateTime
  service_request_status_history           service_request_status_history[]
  users_service_requests_approvedByTousers users?                           @relation("service_requests_approvedByTousers", fields: [approvedBy], references: [id])
  users_service_requests_assignedToTousers users?                           @relation("service_requests_assignedToTousers", fields: [assignedTo], references: [id])
  services                                 services                         @relation(fields: [serviceId], references: [id])
  tenants                                  tenants                          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users_service_requests_userIdTousers     users                            @relation("service_requests_userIdTousers", fields: [userId], references: [id])
  service_reviews                          service_reviews[]
}

model service_reviews {
  id               String            @id
  tenantId         String
  serviceId        String
  userId           String
  requestId        String?
  rating           Int
  title            String?
  comment          String?
  photos           Json?             @default("[]")
  isVerified       Boolean           @default(false)
  isPublic         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  service_requests service_requests? @relation(fields: [requestId], references: [id])
  services         services          @relation(fields: [serviceId], references: [id])
  tenants          tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users            users             @relation(fields: [userId], references: [id])
}

model services {
  id                    String                 @id
  tenantId              String
  name                  String
  description           String?
  category              ServiceCategory
  price                 Decimal                @db.Decimal(10, 2)
  unit                  String                 @default("unit")
  isActive              Boolean                @default(true)
  serviceType           ServiceType            @default(CONSUMABLE)
  availability          ServiceAvailability    @default(ALWAYS)
  maxQuantity           Int?
  requiresApproval      Boolean                @default(false)
  estimatedDeliveryTime String?
  instructions          String?
  tags                  Json?                  @default("[]")
  metadata              Json?                  @default("{}")
  pricingTiers          Json?                  @default("[]")
  dynamicPricing        Boolean                @default(false)
  minimumOrder          Int?                   @default(1)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime
  service_consumptions  service_consumptions[]
  service_providers     service_providers[]
  service_requests      service_requests[]
  service_reviews       service_reviews[]
  tenants               tenants                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model space_features {
  id            String        @id
  spaceId       String
  featureId     String
  quantity      Int           @default(1)
  isWorking     Boolean       @default(true)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  room_features room_features @relation(fields: [featureId], references: [id], onDelete: Cascade)
  spaces        spaces        @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([spaceId, featureId])
}

model spaces {
  id                    String                  @id
  tenantId              String
  name                  String
  type                  SpaceType
  description           String?
  capacity              Int
  amenities             Json?                   @default("[]")
  hourlyRate            Decimal?                @db.Decimal(10, 2)
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  bookings              bookings[]
  occupancy_tracking    occupancy_tracking[]
  room_availability     room_availability[]
  room_check_ins        room_check_ins[]
  room_maintenance_logs room_maintenance_logs[]
  room_pricing_rules    room_pricing_rules[]
  room_usage_analytics  room_usage_analytics[]
  space_features        space_features[]
  tenants               tenants                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model stored_payment_methods {
  id           String          @id
  tenantId     String
  clientId     String
  type         PaymentMethod
  provider     PaymentProvider @default(STRIPE)
  providerData Json            @default("{}")
  last4        String?
  brand        String?
  expiryMonth  Int?
  expiryYear   Int?
  isDefault    Boolean         @default(false)
  isActive     Boolean         @default(true)
  metadata     Json            @default("{}")
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
  clients      clients         @relation(fields: [clientId], references: [id])
  tenants      tenants         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([isDefault, isActive])
  @@index([tenantId, clientId])
}

model subscriptions {
  id                    String                @id
  tenantId              String
  clientId              String
  planId                String
  billingCycleId        String
  name                  String
  description           String?
  startDate             DateTime
  endDate               DateTime?
  status                SubscriptionStatus    @default(ACTIVE)
  billingStatus         BillingStatus         @default(ACTIVE)
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  nextBillingDate       DateTime
  lastBillingDate       DateTime?
  autoRenew             Boolean               @default(true)
  proration             Boolean               @default(false)
  metadata              Json                  @default("{}")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime
  recurring_invoices    recurring_invoices[]
  billing_cycle_configs billing_cycle_configs @relation(fields: [billingCycleId], references: [id])
  clients               clients               @relation(fields: [clientId], references: [id])
  plans                 plans                 @relation(fields: [planId], references: [id])
  tenants               tenants               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  usage_records         usage_records[]

  @@index([nextBillingDate])
  @@index([tenantId, status])
}

model task_reminders {
  id        String       @id
  taskId    String
  type      ReminderType
  timing    Int
  sentAt    DateTime?
  createdAt DateTime     @default(now())
  tasks     tasks        @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model tasks {
  id                              String           @id
  tenantId                        String
  title                           String
  description                     String?
  priority                        TaskPriority     @default(MEDIUM)
  status                          TaskStatus       @default(TODO)
  clientId                        String?
  leadId                          String?
  opportunityId                   String?
  assignedToId                    String?
  assignedById                    String
  dueDate                         DateTime
  completedAt                     DateTime?
  tags                            Json?            @default("[]")
  createdAt                       DateTime         @default(now())
  updatedAt                       DateTime
  actualHours                     Float?
  createdById                     String
  metadata                        Json?            @default("{}")
  reminderDate                    DateTime?
  task_reminders                  task_reminders[]
  users_tasks_assignedByIdTousers users            @relation("tasks_assignedByIdTousers", fields: [assignedById], references: [id])
  users_tasks_assignedToIdTousers users?           @relation("tasks_assignedToIdTousers", fields: [assignedToId], references: [id])
  clients                         clients?         @relation(fields: [clientId], references: [id])
  users_tasks_createdByIdTousers  users            @relation("tasks_createdByIdTousers", fields: [createdById], references: [id])
  leads                           leads?           @relation(fields: [leadId], references: [id])
  opportunities                   opportunities?   @relation(fields: [opportunityId], references: [id])
  tenants                         tenants          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([assignedToId, dueDate])
  @@index([reminderDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tenants {
  id                        String                      @id
  name                      String
  slug                      String                      @unique
  domain                    String?                     @unique
  logo                      String?
  description               String?
  settings                  Json?                       @default("{}")
  status                    TenantStatus                @default(ACTIVE)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime
  logoBase64                String?
  access_logs               access_logs[]
  access_rules              access_rules[]
  access_violations         access_violations[]
  access_zones              access_zones[]
  activities                activities[]
  audit_logs                audit_logs[]
  billing_cycle_configs     billing_cycle_configs[]
  billing_settings          billing_settings?
  booking_approvals         booking_approvals[]
  bookings                  bookings[]
  budget_plans              budget_plans[]
  clients                   clients[]
  communications            communications[]
  contracts                 contracts[]
  discount_codes            discount_codes[]
  financial_dashboards      financial_dashboards[]
  financial_reports         financial_reports[]
  invitations               invitations[]
  invoices                  invoices[]
  lead_conversions          lead_conversions[]
  leads                     leads[]
  memberships               memberships[]
  occupancy_tracking        occupancy_tracking[]
  opportunities             opportunities[]
  opportunity_documents     opportunity_documents[]
  payment_reconciliations   payment_reconciliations[]
  payments                  payments[]
  plans                     plans[]
  price_adjustments         price_adjustments[]
  pricing_rules             pricing_rules[]
  pricing_tiers             pricing_tiers[]
  profit_analyses           profit_analyses[]
  qr_code_scans             qr_code_scans[]
  qr_codes                  qr_codes[]
  quotations                quotations[]
  recurring_invoices        recurring_invoices[]
  revenue_forecasts         revenue_forecasts[]
  room_availability         room_availability[]
  room_check_ins            room_check_ins[]
  room_features             room_features[]
  room_maintenance_logs     room_maintenance_logs[]
  room_pricing_rules        room_pricing_rules[]
  room_usage_analytics      room_usage_analytics[]
  security_events           security_events[]
  service_consumptions      service_consumptions[]
  service_providers         service_providers[]
  service_requests          service_requests[]
  service_reviews           service_reviews[]
  services                  services[]
  spaces                    spaces[]
  stored_payment_methods    stored_payment_methods[]
  subscriptions             subscriptions[]
  tasks                     tasks[]
  usage_records             usage_records[]
  user_sessions             user_sessions[]
  users                     users[]
  visitor_access_codes      visitor_access_codes[]
  visitor_analytics         visitor_analytics[]
  visitor_badges            visitor_badges[]
  visitor_logs              visitor_logs[]
  visitor_notifications     visitor_notifications[]
  visitor_policies          visitor_policies[]
  visitor_pre_registrations visitor_pre_registrations[]
  visitors                  visitors[]
}

model usage_records {
  id             String            @id
  tenantId       String
  clientId       String
  subscriptionId String?
  resourceType   UsageResourceType
  resourceId     String
  quantity       Decimal           @db.Decimal(10, 3)
  unit           String
  unitPrice      Decimal           @db.Decimal(10, 2)
  totalCost      Decimal           @db.Decimal(10, 2)
  usageDate      DateTime
  billingPeriod  String
  invoiced       Boolean           @default(false)
  invoiceId      String?
  metadata       Json              @default("{}")
  createdAt      DateTime          @default(now())
  clients        clients           @relation(fields: [clientId], references: [id])
  subscriptions  subscriptions?    @relation(fields: [subscriptionId], references: [id])
  tenants        tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([clientId, usageDate])
  @@index([invoiced])
  @@index([tenantId, billingPeriod])
}

model user_sessions {
  id           String    @id
  userId       String
  tenantId     String
  refreshToken String
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime
  lastActivity DateTime  @default(now())
  isActive     Boolean   @default(true)
  endedAt      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  tenants      tenants   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users        users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt, isActive])
  @@index([tenantId])
  @@index([userId, isActive])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                                                                    String                           @id
  tenantId                                                              String?
  email                                                                 String
  firstName                                                             String
  lastName                                                              String
  phone                                                                 String?
  avatar                                                                String?
  role                                                                  UserRole
  status                                                                UserStatus                       @default(ACTIVE)
  lastLoginAt                                                           DateTime?
  createdAt                                                             DateTime                         @default(now())
  updatedAt                                                             DateTime
  clientId                                                              String?
  lastTwoFactorVerified                                                 DateTime?
  twoFactorBackupCodes                                                  Json?                            @default("[]")
  twoFactorEnabled                                                      Boolean                          @default(false)
  twoFactorSecret                                                       String?
  clerkId                                                               String?                          @unique
  isActive                                                              Boolean                          @default(true)
  isOnboarded                                                           Boolean                          @default(false)
  access_code_usage                                                     access_code_usage[]
  access_logs                                                           access_logs[]
  access_violations                                                     access_violations[]
  activities                                                            activities[]
  audit_logs                                                            audit_logs[]
  booking_approvals                                                     booking_approvals[]
  bookings                                                              bookings[]
  budget_expenses                                                       budget_expenses[]
  budget_plans_budget_plans_approvedByTousers                           budget_plans[]                   @relation("budget_plans_approvedByTousers")
  budget_plans_budget_plans_createdByTousers                            budget_plans[]                   @relation("budget_plans_createdByTousers")
  communications                                                        communications[]
  financial_dashboards                                                  financial_dashboards[]
  financial_reports                                                     financial_reports[]
  invitations                                                           invitations[]
  invoices                                                              invoices[]
  lead_conversions                                                      lead_conversions[]
  leads                                                                 leads[]
  memberships                                                           memberships[]
  opportunities                                                         opportunities[]
  opportunity_documents                                                 opportunity_documents[]
  payment_reconciliation_items                                          payment_reconciliation_items[]
  payment_reconciliations_payment_reconciliations_approvedByTousers     payment_reconciliations[]        @relation("payment_reconciliations_approvedByTousers")
  payment_reconciliations_payment_reconciliations_reconciledByTousers   payment_reconciliations[]        @relation("payment_reconciliations_reconciledByTousers")
  profit_analyses                                                       profit_analyses[]
  qr_code_scans                                                         qr_code_scans[]
  qr_codes                                                              qr_codes[]
  revenue_forecasts                                                     revenue_forecasts[]
  room_check_ins                                                        room_check_ins[]
  security_events_security_events_performedByIdTousers                  security_events[]                @relation("security_events_performedByIdTousers")
  security_events_security_events_targetUserIdTousers                   security_events[]                @relation("security_events_targetUserIdTousers")
  service_consumptions                                                  service_consumptions[]
  service_request_status_history                                        service_request_status_history[]
  service_requests_service_requests_approvedByTousers                   service_requests[]               @relation("service_requests_approvedByTousers")
  service_requests_service_requests_assignedToTousers                   service_requests[]               @relation("service_requests_assignedToTousers")
  service_requests_service_requests_userIdTousers                       service_requests[]               @relation("service_requests_userIdTousers")
  service_reviews                                                       service_reviews[]
  tasks_tasks_assignedByIdTousers                                       tasks[]                          @relation("tasks_assignedByIdTousers")
  tasks_tasks_assignedToIdTousers                                       tasks[]                          @relation("tasks_assignedToIdTousers")
  tasks_tasks_createdByIdTousers                                        tasks[]                          @relation("tasks_createdByIdTousers")
  user_sessions                                                         user_sessions[]
  clients                                                               clients?                         @relation(fields: [clientId], references: [id])
  tenants                                                               tenants?                         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  visitor_access_codes                                                  visitor_access_codes[]
  visitor_badges_visitor_badges_printedByTousers                        visitor_badges[]                 @relation("visitor_badges_printedByTousers")
  visitor_badges_visitor_badges_returnedToTousers                       visitor_badges[]                 @relation("visitor_badges_returnedToTousers")
  visitor_logs                                                          visitor_logs[]
  visitor_notifications_visitor_notifications_recipientIdTousers        visitor_notifications[]          @relation("visitor_notifications_recipientIdTousers")
  visitor_notifications_visitor_notifications_sentByTousers             visitor_notifications[]          @relation("visitor_notifications_sentByTousers")
  visitor_pre_registrations_visitor_pre_registrations_approvedByTousers visitor_pre_registrations[]      @relation("visitor_pre_registrations_approvedByTousers")
  visitor_pre_registrations_visitor_pre_registrations_hostUserIdTousers visitor_pre_registrations[]      @relation("visitor_pre_registrations_hostUserIdTousers")
  visitors                                                              visitors[]

  @@unique([tenantId, email])
}

model visitor_access_codes {
  id                 String              @id
  tenantId           String
  code               String              @unique
  codeType           AccessCodeType      @default(TEMPORARY)
  visitorId          String?
  isActive           Boolean             @default(true)
  expiresAt          DateTime
  maxUses            Int?                @default(1)
  currentUses        Int                 @default(0)
  accessZones        Json?               @default("[]")
  timeRestrictions   Json?               @default("{}")
  generatedBy        String
  generatedAt        DateTime            @default(now())
  generatedFor       String?
  lastUsedAt         DateTime?
  lastUsedBy         String?
  lastUsedLocation   String?
  ipRestrictions     Json?               @default("[]")
  deviceRestrictions Json?               @default("{}")
  status             CodeStatus          @default(ACTIVE)
  deactivatedBy      String?
  deactivatedAt      DateTime?
  deactivationReason String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  access_code_usage  access_code_usage[]
  users              users               @relation(fields: [generatedBy], references: [id])
  tenants            tenants             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  visitors           visitors?           @relation(fields: [visitorId], references: [id])

  @@index([expiresAt, isActive])
  @@index([status])
  @@index([tenantId, code])
}

model visitor_analytics {
  id                    String          @id
  tenantId              String
  date                  DateTime
  period                AnalyticsPeriod @default(DAILY)
  totalVisitors         Int             @default(0)
  uniqueVisitors        Int             @default(0)
  returningVisitors     Int             @default(0)
  averageVisitDuration  Int?
  onTimeArrivals        Int             @default(0)
  lateArrivals          Int             @default(0)
  earlyDepartures       Int             @default(0)
  noShows               Int             @default(0)
  preRegistrations      Int             @default(0)
  walkIns               Int             @default(0)
  purposeBreakdown      Json            @default("{}")
  peakHour              String?
  peakDay               String?
  busyHours             Json?           @default("[]")
  hostUtilization       Json?           @default("{}")
  accessCodesGenerated  Int             @default(0)
  accessCodesUsed       Int             @default(0)
  companyBreakdown      Json?           @default("{}")
  visitorSources        Json?           @default("{}")
  averageProcessingTime Int?
  automationRate        Decimal?        @db.Decimal(5, 2)
  weekOverWeekGrowth    Decimal?        @db.Decimal(5, 2)
  monthOverMonthGrowth  Decimal?        @db.Decimal(5, 2)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime
  tenants               tenants         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, date, period])
  @@index([date, period])
}

model visitor_badges {
  id                                     String    @id
  tenantId                               String
  visitorId                              String
  badgeNumber                            String    @unique
  badgeType                              BadgeType @default(TEMPORARY)
  printedAt                              DateTime  @default(now())
  printedBy                              String
  printerLocation                        String?
  isActive                               Boolean   @default(true)
  returnedAt                             DateTime?
  returnedTo                             String?
  accessLevel                            String    @default("VISITOR")
  restrictions                           Json?     @default("[]")
  createdAt                              DateTime  @default(now())
  updatedAt                              DateTime
  users_visitor_badges_printedByTousers  users     @relation("visitor_badges_printedByTousers", fields: [printedBy], references: [id])
  users_visitor_badges_returnedToTousers users?    @relation("visitor_badges_returnedToTousers", fields: [returnedTo], references: [id])
  tenants                                tenants   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  visitors                               visitors  @relation(fields: [visitorId], references: [id])

  @@index([tenantId, badgeNumber])
}

model visitor_logs {
  id            String        @id
  tenantId      String
  visitorId     String
  action        VisitorAction
  performedBy   String?
  ipAddress     String?
  userAgent     String?
  location      String?
  accessPointId String?
  details       String?
  metadata      Json?         @default("{}")
  timestamp     DateTime      @default(now())
  users         users?        @relation(fields: [performedBy], references: [id])
  tenants       tenants       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  visitors      visitors      @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@index([tenantId, visitorId])
  @@index([timestamp])
}

model visitor_notifications {
  id                                             String                     @id
  tenantId                                       String
  type                                           NotificationType
  title                                          String
  message                                        String
  urgency                                        NotificationUrgency        @default(NORMAL)
  recipientId                                    String
  visitorId                                      String?
  preRegistrationId                              String?
  channels                                       Json                       @default("[]")
  deliveryMethod                                 DeliveryMethod             @default(IN_APP)
  actionUrl                                      String?
  actionText                                     String?
  templateData                                   Json?                      @default("{}")
  status                                         NotificationStatus         @default(PENDING)
  sentAt                                         DateTime?
  deliveredAt                                    DateTime?
  readAt                                         DateTime?
  acknowledgedAt                                 DateTime?
  deliveryAttempts                               Int                        @default(0)
  lastAttemptAt                                  DateTime?
  errorMessage                                   String?
  sentBy                                         String?
  isSystemGenerated                              Boolean                    @default(true)
  scheduledFor                                   DateTime?
  expiresAt                                      DateTime?
  createdAt                                      DateTime                   @default(now())
  updatedAt                                      DateTime
  visitor_pre_registrations                      visitor_pre_registrations? @relation(fields: [preRegistrationId], references: [id])
  users_visitor_notifications_recipientIdTousers users                      @relation("visitor_notifications_recipientIdTousers", fields: [recipientId], references: [id])
  users_visitor_notifications_sentByTousers      users?                     @relation("visitor_notifications_sentByTousers", fields: [sentBy], references: [id])
  tenants                                        tenants                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  visitors                                       visitors?                  @relation(fields: [visitorId], references: [id])

  @@index([scheduledFor])
  @@index([tenantId, recipientId, status])
  @@index([type, status])
}

model visitor_policies {
  id                        String   @id
  tenantId                  String
  name                      String
  description               String?
  maxDuration               Int      @default(480)
  requiresApproval          Boolean  @default(true)
  requiresPreRegistration   Boolean  @default(false)
  advanceNoticeHours        Int      @default(24)
  requiresIdCheck           Boolean  @default(true)
  requiresPhoto             Boolean  @default(false)
  requiresBadge             Boolean  @default(true)
  requiresEscort            Boolean  @default(false)
  requiresNDA               Boolean  @default(false)
  requiresHealthDeclaration Boolean  @default(false)
  requiresSafetyBriefing    Boolean  @default(false)
  defaultAccessZones        Json?    @default("[]")
  restrictedZones           Json?    @default("[]")
  notifyHostOnArrival       Boolean  @default(true)
  notifySecurityTeam        Boolean  @default(false)
  isActive                  Boolean  @default(true)
  priority                  Int      @default(0)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime
  tenants                   tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, isActive])
}

model visitor_pre_registrations {
  id                                                String                  @id
  tenantId                                          String
  firstName                                         String
  lastName                                          String
  email                                             String
  phone                                             String?
  company                                           String?
  jobTitle                                          String?
  hostUserId                                        String
  expectedArrival                                   DateTime
  expectedDuration                                  Int?
  purpose                                           VisitorPurpose
  purposeDetails                                    String?
  meetingRoom                                       String?
  isApproved                                        Boolean                 @default(false)
  approvedBy                                        String?
  approvedAt                                        DateTime?
  approvalNotes                                     String?
  accessZones                                       Json?                   @default("[]")
  parkingRequired                                   Boolean                 @default(false)
  parkingSpot                                       String?
  invitationSent                                    Boolean                 @default(false)
  invitationSentAt                                  DateTime?
  reminderSent                                      Boolean                 @default(false)
  requiresNDA                                       Boolean                 @default(false)
  requiresHealthCheck                               Boolean                 @default(false)
  customRequirements                                Json?                   @default("[]")
  status                                            PreRegistrationStatus   @default(PENDING)
  visitDate                                         DateTime?
  visitorId                                         String?
  createdAt                                         DateTime                @default(now())
  updatedAt                                         DateTime
  expiresAt                                         DateTime
  visitor_notifications                             visitor_notifications[]
  users_visitor_pre_registrations_approvedByTousers users?                  @relation("visitor_pre_registrations_approvedByTousers", fields: [approvedBy], references: [id])
  users_visitor_pre_registrations_hostUserIdTousers users                   @relation("visitor_pre_registrations_hostUserIdTousers", fields: [hostUserId], references: [id])
  tenants                                           tenants                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  visitors                                          visitors[]

  @@index([email])
  @@index([tenantId, status])
}

model visitors {
  id                        String                     @id
  tenantId                  String
  firstName                 String
  lastName                  String
  email                     String?
  phone                     String?
  company                   String?
  jobTitle                  String?
  photoUrl                  String?
  documentType              String?
  documentNumber            String?
  hostUserId                String
  purpose                   VisitorPurpose
  purposeDetails            String?
  expectedDuration          Int?
  meetingRoom               String?
  qrCode                    String                     @unique
  badgeNumber               String?
  validFrom                 DateTime
  validUntil                DateTime
  accessZones               Json?                      @default("[]")
  status                    VisitorStatus              @default(PENDING)
  checkedInAt               DateTime?
  checkedOutAt              DateTime?
  actualDuration            Int?
  preRegistrationId         String?
  isPreRegistered           Boolean                    @default(false)
  healthDeclaration         Json?                      @default("{}")
  emergencyContact          Json?                      @default("{}")
  ndaSigned                 Boolean                    @default(false)
  ndaSignedAt               DateTime?
  termsAccepted             Boolean                    @default(false)
  dataConsent               Boolean                    @default(false)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime
  access_code_usage         access_code_usage[]
  access_logs               access_logs[]
  access_violations         access_violations[]
  qr_code_scans             qr_code_scans[]
  qr_codes                  qr_codes[]
  visitor_access_codes      visitor_access_codes[]
  visitor_badges            visitor_badges[]
  visitor_logs              visitor_logs[]
  visitor_notifications     visitor_notifications[]
  users                     users                      @relation(fields: [hostUserId], references: [id])
  visitor_pre_registrations visitor_pre_registrations? @relation(fields: [preRegistrationId], references: [id])
  tenants                   tenants                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([qrCode])
  @@index([tenantId, hostUserId])
  @@index([tenantId, status])
}

enum AccessAction {
  ENTRY
  EXIT
  ACCESS_DENIED
  QR_SCANNED
}

enum AccessCodeType {
  TEMPORARY
  RECURRING
  EMERGENCY
  SERVICE
  EVENT
  VIP
}

enum AccessZoneType {
  GENERAL
  MEETING_ROOM
  PRIVATE_OFFICE
  KITCHEN
  PHONE_BOOTH
  STORAGE
  ADMIN
  PARKING
  ROOFTOP
  RESTRICTED
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
  TOUR
  FOLLOW_UP
  DOCUMENT
}

enum AdjustmentType {
  PEAK_HOURS
  OFF_PEAK
  WEEKEND
  HOLIDAY
  LOYALTY
  REFERRAL
  BULK_DISCOUNT
  EARLY_BIRD
  LAST_MINUTE
}

enum AnalysisType {
  PROFITABILITY
  MARGIN_ANALYSIS
  COST_ANALYSIS
  BREAK_EVEN
  ROI_ANALYSIS
  VARIANCE_ANALYSIS
}

enum AnalyticsPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  AUTO_APPROVED
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  RESET_PASSWORD
  CHANGE_PASSWORD
  ENABLE_2FA
  DISABLE_2FA
  VERIFY_2FA
  REVOKE_ACCESS
  GRANT_ACCESS
  EXPORT_DATA
  IMPORT_DATA
  BACKUP_DATA
  RESTORE_DATA
  SYSTEM_CONFIG
  USER_INVITE
  USER_ACTIVATE
  USER_DEACTIVATE
  PAYMENT_PROCESS
  CONTRACT_SIGN
  QR_GENERATE
  QR_SCAN
}

enum BadgeType {
  TEMPORARY
  DAY_PASS
  MULTI_DAY
  CONTRACTOR
  VIP
}

enum BillingCycle {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum BillingStatus {
  ACTIVE
  PAST_DUE
  SUSPENDED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  CHECKED_IN
  CHECKED_OUT
}

enum BudgetStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  ACTIVE
  ARCHIVED
}

enum BudgetType {
  ANNUAL
  QUARTERLY
  PROJECT_BASED
  ROLLING
}

enum ClientStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
  CHURNED
}

enum CodeStatus {
  ACTIVE
  EXPIRED
  USED_UP
  DEACTIVATED
  SUSPENDED
}

enum CommDirection {
  INBOUND
  OUTBOUND
}

enum CommStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum CommunicationType {
  EMAIL
  SMS
  WHATSAPP
  PHONE
  CHAT
  LETTER
  MEETING
  SOCIAL_MEDIA
  NOTE
  DOCUMENT
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
}

enum DashboardType {
  EXECUTIVE
  OPERATIONAL
  FINANCIAL
  CUSTOM
}

enum DeliveryMethod {
  EMAIL
  SMS
  PUSH
  IN_APP
  SLACK
  TEAMS
  WEBHOOK
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_DAYS
  UPGRADE
}

enum DiscrepancyType {
  AMOUNT_MISMATCH
  DATE_MISMATCH
  MISSING_TRANSACTION
  DUPLICATE_TRANSACTION
  CURRENCY_MISMATCH
  REFERENCE_MISMATCH
}

enum ExpenseStatus {
  PLANNED
  COMMITTED
  ACTUAL
  OVERBUDGET
}

enum FeatureCategory {
  TECHNOLOGY
  FURNITURE
  AMENITIES
  ACCESSIBILITY
  ENVIRONMENT
  CONNECTIVITY
}

enum FeeType {
  FIXED
  PERCENTAGE
}

enum FinancialReportType {
  INCOME_STATEMENT
  BALANCE_SHEET
  CASH_FLOW
  REVENUE_ANALYSIS
  EXPENSE_BREAKDOWN
  PROFIT_LOSS
  BUDGET_VARIANCE
  TAX_REPORT
  CUSTOM
}

enum ForecastMethod {
  LINEAR_REGRESSION
  MOVING_AVERAGE
  EXPONENTIAL_SMOOTHING
  SEASONAL_DECOMPOSITION
  MACHINE_LEARNING
  EXPERT_JUDGMENT
}

enum ForecastPeriod {
  MONTHLY
  QUARTERLY
  ANNUALLY
  ROLLING_12_MONTHS
  CUSTOM
}

enum ForecastStatus {
  ACTIVE
  ARCHIVED
  SUPERSEDED
}

enum ForecastType {
  REVENUE
  EXPENSE
  PROFIT
  CASH_FLOW
  OCCUPANCY
  MEMBERSHIP
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REVOKED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  COLD_CALL
  EMAIL_CAMPAIGN
  WALK_IN
  PARTNER
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  UNQUALIFIED
  CONVERTED
  LOST
  FOLLOW_UP
  DORMANT
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELAYED
}

enum MaintenanceType {
  CLEANING
  REPAIR
  UPGRADE
  INSPECTION
  PREVENTIVE
  EMERGENCY
}

enum MatchStatus {
  MATCHED
  UNMATCHED
  PARTIAL_MATCH
  DISPUTED
  MANUALLY_MATCHED
}

enum MembershipStatus {
  ACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED
}

enum ModifierType {
  MULTIPLIER
  ADDITION
  DISCOUNT
  REPLACEMENT
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  ACKNOWLEDGED
  FAILED
  EXPIRED
}

enum NotificationType {
  VISITOR_ARRIVAL
  VISITOR_DEPARTURE
  VISITOR_LATE
  VISITOR_NO_SHOW
  PRE_REGISTRATION_REQUEST
  PRE_REGISTRATION_APPROVED
  PRE_REGISTRATION_DENIED
  ACCESS_CODE_GENERATED
  SECURITY_ALERT
  HOST_ASSIGNMENT
  VISIT_REMINDER
  POLICY_VIOLATION
  BADGE_ISSUE
  EXTENDED_STAY
  EMERGENCY_NOTIFICATION
}

enum NotificationUrgency {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  OTHER
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  BANK_TRANSFER
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PipelineStage {
  INITIAL_CONTACT
  NEEDS_ANALYSIS
  PROPOSAL_SENT
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
  CONTRACT_REVIEW
  ON_HOLD
}

enum PlanType {
  HOT_DESK
  DEDICATED_DESK
  PRIVATE_OFFICE
  MEETING_ROOM
  VIRTUAL_OFFICE
  CUSTOM
}

enum PreRegistrationStatus {
  PENDING
  APPROVED
  EXPIRED
  CONVERTED
  CANCELLED
}

enum PriceModifierType {
  MULTIPLIER
  ADDITION
  DISCOUNT
  REPLACEMENT
}

enum PricingRuleType {
  TIME_BASED
  USAGE_BASED
  MEMBER_BASED
  LOCATION_BASED
  SEASONAL
  PROMOTIONAL
}

enum QRCodeStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  REVOKED
  USED_UP
}

enum QRCodeType {
  MEMBER
  VISITOR
  TEMPORARY
  SERVICE
  EMERGENCY
  ADMIN
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  VIEWED
  CONVERTED
}

enum ReconciliationStatus {
  IN_PROGRESS
  COMPLETED
  REQUIRES_REVIEW
  APPROVED
  REJECTED
}

enum ReconciliationType {
  BANK_RECONCILIATION
  CREDIT_CARD_RECONCILIATION
  PAYMENT_GATEWAY_RECONCILIATION
  CASH_RECONCILIATION
}

enum RecurrenceType {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum RecurringInvoiceStatus {
  ACTIVE
  PAUSED
  CANCELLED
  COMPLETED
}

enum ReminderType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum ReportPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  CUSTOM
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  ARCHIVED
}

enum RequestPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum ScanResult {
  SUCCESS
  DENIED
  EXPIRED
  INVALID
  RESTRICTED
  CAPACITY_FULL
  VIOLATION
}

enum SecurityEventType {
  FAILED_LOGIN
  MULTIPLE_FAILED_LOGINS
  SUCCESSFUL_LOGIN
  SUSPICIOUS_LOGIN
  PASSWORD_BREACH_ATTEMPT
  ACCOUNT_LOCKOUT
  PRIVILEGE_ESCALATION
  UNAUTHORIZED_ACCESS
  DATA_EXPORT
  ADMIN_ACTION
  TWO_FACTOR_BYPASS_ATTEMPT
  SESSION_HIJACK_ATTEMPT
  RATE_LIMIT_EXCEEDED
  MALICIOUS_REQUEST
  SYSTEM_INTRUSION
  THREAT_DETECTED
  LOGIN_FAILED
  ACCESS_DENIED
  DATA_ACCESS
  FILE_DOWNLOAD
  BULK_ACCESS
  ROLE_CHANGE
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ServiceAvailability {
  ALWAYS
  BUSINESS_HOURS
  SCHEDULED
  ON_REQUEST
}

enum ServiceCategory {
  PRINTING
  COFFEE
  FOOD
  PARKING
  STORAGE
  MAIL
  PHONE
  INTERNET
  CLEANING
  BUSINESS_SUPPORT
  EVENT_SERVICES
  WELLNESS
  TRANSPORTATION
  CONSULTING
  MAINTENANCE
  OTHER
}

enum ServiceType {
  CONSUMABLE
  SUBSCRIPTION
  ON_DEMAND
  APPOINTMENT
}

enum SpaceType {
  MEETING_ROOM
  CONFERENCE_ROOM
  PHONE_BOOTH
  EVENT_SPACE
  COMMON_AREA
  KITCHEN
  LOUNGE
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
  TRIAL
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
  PENDING
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum UsageResourceType {
  SPACE_BOOKING
  SERVICE_CONSUMPTION
  MEMBERSHIP_PLAN
  STORAGE_USAGE
  INTERNET_USAGE
  PRINTING
  PHONE_CALLS
  PARKING
  OTHER
}

enum UserRole {
  SUPER_ADMIN
  COWORK_ADMIN
  CLIENT_ADMIN
  END_USER
  COWORK_USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ValueType {
  PERCENTAGE
  FIXED_AMOUNT
  MULTIPLIER
}

enum ViolationSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ViolationType {
  UNAUTHORIZED_ACCESS
  TIME_VIOLATION
  CAPACITY_EXCEEDED
  EXPIRED_MEMBERSHIP
  SUSPENDED_ACCOUNT
  TAILGATING
  INVALID_CREDENTIALS
  MULTIPLE_ENTRIES
}

enum VisitorAction {
  PRE_REGISTERED
  INVITATION_SENT
  APPROVED
  DENIED
  CHECKED_IN
  CHECKED_OUT
  ACCESS_GRANTED
  ACCESS_DENIED
  BADGE_PRINTED
  BADGE_RETURNED
  EXTENDED_STAY
  EARLY_DEPARTURE
  SECURITY_ALERT
  HOST_NOTIFIED
}

enum VisitorPurpose {
  MEETING
  INTERVIEW
  DELIVERY
  SERVICE
  EVENT
  TOUR
  OTHER
}

enum VisitorStatus {
  PENDING
  APPROVED
  CHECKED_IN
  CHECKED_OUT
  EXPIRED
  CANCELLED
  DENIED
}
