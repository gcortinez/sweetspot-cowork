import { BillingCycle, SubscriptionStatus, BillingStatus, UsageResourceType, FeeType } from '@prisma/client';
export interface CreateSubscriptionData {
    clientId: string;
    planId: string;
    billingCycleId: string;
    name: string;
    description?: string;
    startDate: Date;
    endDate?: Date;
    autoRenew?: boolean;
    proration?: boolean;
    metadata?: Record<string, any>;
}
export interface CreateUsageRecordData {
    clientId: string;
    subscriptionId?: string;
    resourceType: UsageResourceType;
    resourceId: string;
    quantity: number;
    unit: string;
    unitPrice: number;
    usageDate: Date;
    metadata?: Record<string, any>;
}
export interface BillingCycleData {
    name: string;
    description?: string;
    cycle: BillingCycle;
    dayOfMonth?: number;
    dayOfWeek?: number;
    cutoffDays?: number;
    gracePeriodDays?: number;
    autoGenerate?: boolean;
}
export interface InvoiceGenerationOptions {
    includeUsage?: boolean;
    billingPeriod?: string;
    dueDate?: Date;
    autoSend?: boolean;
    template?: string;
}
export interface BillingReport {
    totalRevenue: number;
    totalSubscriptions: number;
    activeSubscriptions: number;
    overdueInvoices: number;
    unpaidAmount: number;
    monthlyRecurringRevenue: number;
    churnRate: number;
    averageRevenuePerUser: number;
}
export declare class BillingService {
    createBillingCycle(tenantId: string, data: BillingCycleData): Promise<{
        tenantId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        description: string | null;
        isActive: boolean;
        cycle: import(".prisma/client").$Enums.BillingCycle;
        dayOfMonth: number | null;
        dayOfWeek: number | null;
        cutoffDays: number;
        gracePeriodDays: number;
        autoGenerate: boolean;
    }>;
    getBillingCycles(tenantId: string): Promise<{
        tenantId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        description: string | null;
        isActive: boolean;
        cycle: import(".prisma/client").$Enums.BillingCycle;
        dayOfMonth: number | null;
        dayOfWeek: number | null;
        cutoffDays: number;
        gracePeriodDays: number;
        autoGenerate: boolean;
    }[]>;
    updateBillingCycle(tenantId: string, cycleId: string, data: Partial<BillingCycleData>): Promise<import(".prisma/client").Prisma.BatchPayload>;
    createSubscription(tenantId: string, data: CreateSubscriptionData): Promise<{
        client: {
            tenantId: string;
            phone: string | null;
            taxId: string | null;
            id: string;
            status: import(".prisma/client").$Enums.ClientStatus;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            name: string;
            address: string | null;
            contactPerson: string | null;
            notes: string | null;
        };
        plan: {
            tenantId: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            type: import(".prisma/client").$Enums.PlanType;
            isActive: boolean;
            price: import("@prisma/client/runtime/library").Decimal;
            currency: string;
            billingCycle: import(".prisma/client").$Enums.BillingCycle;
            features: import("@prisma/client/runtime/library").JsonValue | null;
            maxUsers: number | null;
            accessHours: import("@prisma/client/runtime/library").JsonValue | null;
        };
        billingCycle: {
            tenantId: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            isActive: boolean;
            cycle: import(".prisma/client").$Enums.BillingCycle;
            dayOfMonth: number | null;
            dayOfWeek: number | null;
            cutoffDays: number;
            gracePeriodDays: number;
            autoGenerate: boolean;
        };
    } & {
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        startDate: Date;
        endDate: Date | null;
        status: import(".prisma/client").$Enums.SubscriptionStatus;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        description: string | null;
        planId: string;
        billingCycleId: string;
        billingStatus: import(".prisma/client").$Enums.BillingStatus;
        currentPeriodStart: Date;
        currentPeriodEnd: Date;
        nextBillingDate: Date;
        lastBillingDate: Date | null;
        autoRenew: boolean;
        proration: boolean;
    }>;
    getSubscriptions(tenantId: string, filters?: {
        clientId?: string;
        status?: SubscriptionStatus;
        billingStatus?: BillingStatus;
    }): Promise<({
        client: {
            tenantId: string;
            phone: string | null;
            taxId: string | null;
            id: string;
            status: import(".prisma/client").$Enums.ClientStatus;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            name: string;
            address: string | null;
            contactPerson: string | null;
            notes: string | null;
        };
        plan: {
            tenantId: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            type: import(".prisma/client").$Enums.PlanType;
            isActive: boolean;
            price: import("@prisma/client/runtime/library").Decimal;
            currency: string;
            billingCycle: import(".prisma/client").$Enums.BillingCycle;
            features: import("@prisma/client/runtime/library").JsonValue | null;
            maxUsers: number | null;
            accessHours: import("@prisma/client/runtime/library").JsonValue | null;
        };
        billingCycle: {
            tenantId: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            isActive: boolean;
            cycle: import(".prisma/client").$Enums.BillingCycle;
            dayOfMonth: number | null;
            dayOfWeek: number | null;
            cutoffDays: number;
            gracePeriodDays: number;
            autoGenerate: boolean;
        };
    } & {
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        startDate: Date;
        endDate: Date | null;
        status: import(".prisma/client").$Enums.SubscriptionStatus;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        description: string | null;
        planId: string;
        billingCycleId: string;
        billingStatus: import(".prisma/client").$Enums.BillingStatus;
        currentPeriodStart: Date;
        currentPeriodEnd: Date;
        nextBillingDate: Date;
        lastBillingDate: Date | null;
        autoRenew: boolean;
        proration: boolean;
    })[]>;
    updateSubscription(tenantId: string, subscriptionId: string, data: {
        status?: SubscriptionStatus;
        billingStatus?: BillingStatus;
        endDate?: Date;
        autoRenew?: boolean;
        metadata?: Record<string, any>;
    }): Promise<import(".prisma/client").Prisma.BatchPayload>;
    cancelSubscription(tenantId: string, subscriptionId: string, endDate?: Date): Promise<{
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        startDate: Date;
        endDate: Date | null;
        status: import(".prisma/client").$Enums.SubscriptionStatus;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        description: string | null;
        planId: string;
        billingCycleId: string;
        billingStatus: import(".prisma/client").$Enums.BillingStatus;
        currentPeriodStart: Date;
        currentPeriodEnd: Date;
        nextBillingDate: Date;
        lastBillingDate: Date | null;
        autoRenew: boolean;
        proration: boolean;
    }>;
    recordUsage(tenantId: string, data: CreateUsageRecordData): Promise<{
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        createdAt: Date;
        unit: string;
        invoiceId: string | null;
        quantity: import("@prisma/client/runtime/library").Decimal;
        unitPrice: import("@prisma/client/runtime/library").Decimal;
        invoiced: boolean;
        subscriptionId: string | null;
        resourceType: import(".prisma/client").$Enums.UsageResourceType;
        resourceId: string;
        totalCost: import("@prisma/client/runtime/library").Decimal;
        usageDate: Date;
        billingPeriod: string;
    }>;
    getUsageRecords(tenantId: string, filters?: {
        clientId?: string;
        subscriptionId?: string;
        resourceType?: UsageResourceType;
        billingPeriod?: string;
        invoiced?: boolean;
        startDate?: Date;
        endDate?: Date;
    }): Promise<({
        client: {
            tenantId: string;
            phone: string | null;
            taxId: string | null;
            id: string;
            status: import(".prisma/client").$Enums.ClientStatus;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            name: string;
            address: string | null;
            contactPerson: string | null;
            notes: string | null;
        };
        subscription: {
            tenantId: string;
            metadata: import("@prisma/client/runtime/library").JsonValue;
            id: string;
            clientId: string;
            startDate: Date;
            endDate: Date | null;
            status: import(".prisma/client").$Enums.SubscriptionStatus;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            planId: string;
            billingCycleId: string;
            billingStatus: import(".prisma/client").$Enums.BillingStatus;
            currentPeriodStart: Date;
            currentPeriodEnd: Date;
            nextBillingDate: Date;
            lastBillingDate: Date | null;
            autoRenew: boolean;
            proration: boolean;
        } | null;
    } & {
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        createdAt: Date;
        unit: string;
        invoiceId: string | null;
        quantity: import("@prisma/client/runtime/library").Decimal;
        unitPrice: import("@prisma/client/runtime/library").Decimal;
        invoiced: boolean;
        subscriptionId: string | null;
        resourceType: import(".prisma/client").$Enums.UsageResourceType;
        resourceId: string;
        totalCost: import("@prisma/client/runtime/library").Decimal;
        usageDate: Date;
        billingPeriod: string;
    })[]>;
    getUsageSummary(tenantId: string, clientId: string, billingPeriod: string): Promise<any[]>;
    generateInvoiceForSubscription(tenantId: string, subscriptionId: string, options?: InvoiceGenerationOptions): Promise<{
        client: {
            tenantId: string;
            phone: string | null;
            taxId: string | null;
            id: string;
            status: import(".prisma/client").$Enums.ClientStatus;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            name: string;
            address: string | null;
            contactPerson: string | null;
            notes: string | null;
        };
        items: {
            total: import("@prisma/client/runtime/library").Decimal;
            id: string;
            createdAt: Date;
            description: string;
            invoiceId: string;
            quantity: number;
            unitPrice: import("@prisma/client/runtime/library").Decimal;
        }[];
    } & {
        number: string;
        total: import("@prisma/client/runtime/library").Decimal;
        tenantId: string;
        id: string;
        clientId: string;
        title: string | null;
        status: import(".prisma/client").$Enums.InvoiceStatus;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        currency: string;
        subtotal: import("@prisma/client/runtime/library").Decimal;
        tax: import("@prisma/client/runtime/library").Decimal;
        dueDate: Date;
        paidAt: Date | null;
        createdById: string;
    }>;
    generateRecurringInvoices(tenantId: string): Promise<({
        success: boolean;
        invoice: {
            client: {
                tenantId: string;
                phone: string | null;
                taxId: string | null;
                id: string;
                status: import(".prisma/client").$Enums.ClientStatus;
                createdAt: Date;
                updatedAt: Date;
                email: string;
                name: string;
                address: string | null;
                contactPerson: string | null;
                notes: string | null;
            };
            items: {
                total: import("@prisma/client/runtime/library").Decimal;
                id: string;
                createdAt: Date;
                description: string;
                invoiceId: string;
                quantity: number;
                unitPrice: import("@prisma/client/runtime/library").Decimal;
            }[];
        } & {
            number: string;
            total: import("@prisma/client/runtime/library").Decimal;
            tenantId: string;
            id: string;
            clientId: string;
            title: string | null;
            status: import(".prisma/client").$Enums.InvoiceStatus;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            currency: string;
            subtotal: import("@prisma/client/runtime/library").Decimal;
            tax: import("@prisma/client/runtime/library").Decimal;
            dueDate: Date;
            paidAt: Date | null;
            createdById: string;
        };
        error?: undefined;
        recurringInvoiceId?: undefined;
    } | {
        success: boolean;
        error: string;
        recurringInvoiceId: string;
        invoice?: undefined;
    })[]>;
    getBillingSettings(tenantId: string): Promise<{
        tenantId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        currency: string;
        gracePeriodDays: number;
        timezone: string;
        taxRate: import("@prisma/client/runtime/library").Decimal;
        taxIncluded: boolean;
        invoicePrefix: string;
        invoiceNumberStart: number;
        paymentTermsDays: number;
        latePaymentFee: import("@prisma/client/runtime/library").Decimal;
        latePaymentFeeType: import(".prisma/client").$Enums.FeeType;
        autoGenerateInvoices: boolean;
        autoSendInvoices: boolean;
        autoCollectPayments: boolean;
        retryFailedPayments: boolean;
        maxRetryAttempts: number;
        retryIntervalDays: number;
        dunningEnabled: boolean;
        emailTemplates: import("@prisma/client/runtime/library").JsonValue;
        webhookUrls: import("@prisma/client/runtime/library").JsonValue;
    }>;
    updateBillingSettings(tenantId: string, data: Partial<{
        currency: string;
        timezone: string;
        taxRate: number;
        taxIncluded: boolean;
        invoicePrefix: string;
        paymentTermsDays: number;
        latePaymentFee: number;
        latePaymentFeeType: FeeType;
        autoGenerateInvoices: boolean;
        autoSendInvoices: boolean;
        autoCollectPayments: boolean;
        retryFailedPayments: boolean;
        maxRetryAttempts: number;
        retryIntervalDays: number;
        gracePeriodDays: number;
        dunningEnabled: boolean;
        emailTemplates: Record<string, any>;
        webhookUrls: string[];
    }>): Promise<{
        tenantId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        currency: string;
        gracePeriodDays: number;
        timezone: string;
        taxRate: import("@prisma/client/runtime/library").Decimal;
        taxIncluded: boolean;
        invoicePrefix: string;
        invoiceNumberStart: number;
        paymentTermsDays: number;
        latePaymentFee: import("@prisma/client/runtime/library").Decimal;
        latePaymentFeeType: import(".prisma/client").$Enums.FeeType;
        autoGenerateInvoices: boolean;
        autoSendInvoices: boolean;
        autoCollectPayments: boolean;
        retryFailedPayments: boolean;
        maxRetryAttempts: number;
        retryIntervalDays: number;
        dunningEnabled: boolean;
        emailTemplates: import("@prisma/client/runtime/library").JsonValue;
        webhookUrls: import("@prisma/client/runtime/library").JsonValue;
    }>;
    getBillingReport(tenantId: string, startDate: Date, endDate: Date): Promise<BillingReport>;
    private calculateNextBillingDate;
    private getBillingPeriod;
    private calculateDueDate;
    private generateInvoiceNumber;
    private calculateChurnRate;
}
//# sourceMappingURL=billingService.d.ts.map