import { UsageResourceType } from '@prisma/client';
export interface TrackConsumptionData {
    clientId: string;
    subscriptionId?: string;
    resourceType: UsageResourceType;
    resourceId: string;
    quantity: number;
    unit: string;
    unitPrice?: number;
    usageDate?: Date;
    metadata?: Record<string, any>;
}
export interface ConsumptionSummary {
    resourceType: UsageResourceType;
    resourceId: string;
    resourceName: string;
    totalQuantity: number;
    totalCost: number;
    unit: string;
    averageUnitPrice: number;
    usageCount: number;
    lastUsed: Date;
    trend: 'increasing' | 'decreasing' | 'stable';
}
export interface UsageReport {
    period: string;
    clientId: string;
    clientName: string;
    totalCost: number;
    byResourceType: Record<UsageResourceType, {
        quantity: number;
        cost: number;
        percentage: number;
    }>;
    topResources: Array<{
        resourceId: string;
        resourceName: string;
        resourceType: UsageResourceType;
        quantity: number;
        cost: number;
    }>;
    comparisonToPrevious: {
        costChange: number;
        quantityChange: number;
        percentageChange: number;
    };
}
export declare class ConsumptionTrackingService {
    trackConsumption(tenantId: string, data: TrackConsumptionData): Promise<{
        client: {
            tenantId: string;
            phone: string | null;
            taxId: string | null;
            id: string;
            status: import(".prisma/client").$Enums.ClientStatus;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            name: string;
            address: string | null;
            contactPerson: string | null;
            notes: string | null;
        };
        subscription: {
            tenantId: string;
            metadata: import("@prisma/client/runtime/library").JsonValue;
            id: string;
            clientId: string;
            startDate: Date;
            endDate: Date | null;
            status: import(".prisma/client").$Enums.SubscriptionStatus;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            planId: string;
            billingCycleId: string;
            billingStatus: import(".prisma/client").$Enums.BillingStatus;
            currentPeriodStart: Date;
            currentPeriodEnd: Date;
            nextBillingDate: Date;
            lastBillingDate: Date | null;
            autoRenew: boolean;
            proration: boolean;
        } | null;
    } & {
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        createdAt: Date;
        unit: string;
        invoiceId: string | null;
        quantity: import("@prisma/client/runtime/library").Decimal;
        unitPrice: import("@prisma/client/runtime/library").Decimal;
        invoiced: boolean;
        subscriptionId: string | null;
        resourceType: import(".prisma/client").$Enums.UsageResourceType;
        resourceId: string;
        totalCost: import("@prisma/client/runtime/library").Decimal;
        usageDate: Date;
        billingPeriod: string;
    }>;
    trackSpaceUsage(tenantId: string, spaceId: string, userId: string, startTime: Date, endTime: Date): Promise<{
        client: {
            tenantId: string;
            phone: string | null;
            taxId: string | null;
            id: string;
            status: import(".prisma/client").$Enums.ClientStatus;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            name: string;
            address: string | null;
            contactPerson: string | null;
            notes: string | null;
        };
        subscription: {
            tenantId: string;
            metadata: import("@prisma/client/runtime/library").JsonValue;
            id: string;
            clientId: string;
            startDate: Date;
            endDate: Date | null;
            status: import(".prisma/client").$Enums.SubscriptionStatus;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            planId: string;
            billingCycleId: string;
            billingStatus: import(".prisma/client").$Enums.BillingStatus;
            currentPeriodStart: Date;
            currentPeriodEnd: Date;
            nextBillingDate: Date;
            lastBillingDate: Date | null;
            autoRenew: boolean;
            proration: boolean;
        } | null;
    } & {
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        createdAt: Date;
        unit: string;
        invoiceId: string | null;
        quantity: import("@prisma/client/runtime/library").Decimal;
        unitPrice: import("@prisma/client/runtime/library").Decimal;
        invoiced: boolean;
        subscriptionId: string | null;
        resourceType: import(".prisma/client").$Enums.UsageResourceType;
        resourceId: string;
        totalCost: import("@prisma/client/runtime/library").Decimal;
        usageDate: Date;
        billingPeriod: string;
    }>;
    trackServiceUsage(tenantId: string, serviceId: string, userId: string, quantity: number): Promise<{
        client: {
            tenantId: string;
            phone: string | null;
            taxId: string | null;
            id: string;
            status: import(".prisma/client").$Enums.ClientStatus;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            name: string;
            address: string | null;
            contactPerson: string | null;
            notes: string | null;
        };
        subscription: {
            tenantId: string;
            metadata: import("@prisma/client/runtime/library").JsonValue;
            id: string;
            clientId: string;
            startDate: Date;
            endDate: Date | null;
            status: import(".prisma/client").$Enums.SubscriptionStatus;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            planId: string;
            billingCycleId: string;
            billingStatus: import(".prisma/client").$Enums.BillingStatus;
            currentPeriodStart: Date;
            currentPeriodEnd: Date;
            nextBillingDate: Date;
            lastBillingDate: Date | null;
            autoRenew: boolean;
            proration: boolean;
        } | null;
    } & {
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        createdAt: Date;
        unit: string;
        invoiceId: string | null;
        quantity: import("@prisma/client/runtime/library").Decimal;
        unitPrice: import("@prisma/client/runtime/library").Decimal;
        invoiced: boolean;
        subscriptionId: string | null;
        resourceType: import(".prisma/client").$Enums.UsageResourceType;
        resourceId: string;
        totalCost: import("@prisma/client/runtime/library").Decimal;
        usageDate: Date;
        billingPeriod: string;
    }>;
    trackMembershipUsage(tenantId: string, membershipId: string, billingPeriod: string): Promise<{
        client: {
            tenantId: string;
            phone: string | null;
            taxId: string | null;
            id: string;
            status: import(".prisma/client").$Enums.ClientStatus;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            name: string;
            address: string | null;
            contactPerson: string | null;
            notes: string | null;
        };
        subscription: {
            tenantId: string;
            metadata: import("@prisma/client/runtime/library").JsonValue;
            id: string;
            clientId: string;
            startDate: Date;
            endDate: Date | null;
            status: import(".prisma/client").$Enums.SubscriptionStatus;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            planId: string;
            billingCycleId: string;
            billingStatus: import(".prisma/client").$Enums.BillingStatus;
            currentPeriodStart: Date;
            currentPeriodEnd: Date;
            nextBillingDate: Date;
            lastBillingDate: Date | null;
            autoRenew: boolean;
            proration: boolean;
        } | null;
    } & {
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        createdAt: Date;
        unit: string;
        invoiceId: string | null;
        quantity: import("@prisma/client/runtime/library").Decimal;
        unitPrice: import("@prisma/client/runtime/library").Decimal;
        invoiced: boolean;
        subscriptionId: string | null;
        resourceType: import(".prisma/client").$Enums.UsageResourceType;
        resourceId: string;
        totalCost: import("@prisma/client/runtime/library").Decimal;
        usageDate: Date;
        billingPeriod: string;
    }>;
    getConsumptionSummary(tenantId: string, clientId: string, startDate: Date, endDate: Date): Promise<ConsumptionSummary[]>;
    getUsageReport(tenantId: string, clientId: string, period: string): Promise<UsageReport>;
    getConsumptionTrends(tenantId: string, clientId?: string, resourceType?: UsageResourceType, months?: number): Promise<any[]>;
    getUnbilledUsage(tenantId: string, clientId?: string, billingPeriod?: string): Promise<({
        client: {
            tenantId: string;
            phone: string | null;
            taxId: string | null;
            id: string;
            status: import(".prisma/client").$Enums.ClientStatus;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            name: string;
            address: string | null;
            contactPerson: string | null;
            notes: string | null;
        };
        subscription: {
            tenantId: string;
            metadata: import("@prisma/client/runtime/library").JsonValue;
            id: string;
            clientId: string;
            startDate: Date;
            endDate: Date | null;
            status: import(".prisma/client").$Enums.SubscriptionStatus;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            planId: string;
            billingCycleId: string;
            billingStatus: import(".prisma/client").$Enums.BillingStatus;
            currentPeriodStart: Date;
            currentPeriodEnd: Date;
            nextBillingDate: Date;
            lastBillingDate: Date | null;
            autoRenew: boolean;
            proration: boolean;
        } | null;
    } & {
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        createdAt: Date;
        unit: string;
        invoiceId: string | null;
        quantity: import("@prisma/client/runtime/library").Decimal;
        unitPrice: import("@prisma/client/runtime/library").Decimal;
        invoiced: boolean;
        subscriptionId: string | null;
        resourceType: import(".prisma/client").$Enums.UsageResourceType;
        resourceId: string;
        totalCost: import("@prisma/client/runtime/library").Decimal;
        usageDate: Date;
        billingPeriod: string;
    })[]>;
    markUsageAsBilled(tenantId: string, usageRecordIds: string[], invoiceId: string): Promise<import(".prisma/client").Prisma.BatchPayload>;
    getUsageForBilling(tenantId: string, subscriptionId: string, billingPeriod: string): Promise<({
        client: {
            tenantId: string;
            phone: string | null;
            taxId: string | null;
            id: string;
            status: import(".prisma/client").$Enums.ClientStatus;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            name: string;
            address: string | null;
            contactPerson: string | null;
            notes: string | null;
        };
        subscription: {
            tenantId: string;
            metadata: import("@prisma/client/runtime/library").JsonValue;
            id: string;
            clientId: string;
            startDate: Date;
            endDate: Date | null;
            status: import(".prisma/client").$Enums.SubscriptionStatus;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            description: string | null;
            planId: string;
            billingCycleId: string;
            billingStatus: import(".prisma/client").$Enums.BillingStatus;
            currentPeriodStart: Date;
            currentPeriodEnd: Date;
            nextBillingDate: Date;
            lastBillingDate: Date | null;
            autoRenew: boolean;
            proration: boolean;
        } | null;
    } & {
        tenantId: string;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        clientId: string;
        createdAt: Date;
        unit: string;
        invoiceId: string | null;
        quantity: import("@prisma/client/runtime/library").Decimal;
        unitPrice: import("@prisma/client/runtime/library").Decimal;
        invoiced: boolean;
        subscriptionId: string | null;
        resourceType: import(".prisma/client").$Enums.UsageResourceType;
        resourceId: string;
        totalCost: import("@prisma/client/runtime/library").Decimal;
        usageDate: Date;
        billingPeriod: string;
    })[]>;
    private getResourcePrice;
    private getResourceName;
    private getBillingPeriod;
    private parsePeriod;
    private getPreviousPeriod;
    private calculateUsageTrend;
    private groupByResourceType;
    private getTopResources;
    private updateConsumptionMetrics;
}
export declare const consumptionTrackingService: ConsumptionTrackingService;
//# sourceMappingURL=consumptionTrackingService.d.ts.map