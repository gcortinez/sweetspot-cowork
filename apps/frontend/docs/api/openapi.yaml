openapi: 3.0.3
info:
  title: SweetSpot Cowork API
  description: |
    Comprehensive API for SweetSpot Cowork - a multi-tenant coworking space management platform.
    
    ## Authentication
    All endpoints require authentication via JWT tokens obtained through the Supabase Auth system.
    Include the token in the Authorization header: `Bearer <token>`
    
    ## Multi-Tenancy
    All operations are automatically scoped to the authenticated user's tenant.
    The tenant context is extracted from the JWT token.
    
    ## Error Handling
    All endpoints return consistent error responses with the following structure:
    ```json
    {
      "success": false,
      "error": "Error message",
      "details": {} // Optional additional error details
    }
    ```
    
    ## Pagination
    List endpoints support pagination with the following query parameters:
    - `page`: Page number (default: 1)
    - `limit`: Items per page (default: 20, max: 100)
    
    Pagination responses include:
    ```json
    {
      "success": true,
      "data": [...],
      "pagination": {
        "page": 1,
        "limit": 20,
        "total": 100,
        "pages": 5
      }
    }
    ```
  version: 1.0.0
  contact:
    name: SweetSpot Cowork Support
    email: support@sweetspotcowork.com
  license:
    name: Proprietary
    url: https://sweetspotcowork.com/license

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://app.sweetspotcowork.com/api
    description: Production server

security:
  - BearerAuth: []

paths:
  # Client Management
  /clients:
    get:
      tags: [Clients]
      summary: List clients
      description: Retrieve a paginated list of clients with optional filtering and sorting
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search by client name or email
          schema:
            type: string
        - name: type
          in: query
          description: Filter by client type
          schema:
            $ref: '#/components/schemas/ClientType'
        - name: status
          in: query
          description: Filter by client status
          schema:
            $ref: '#/components/schemas/ClientStatus'
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [name, email, createdAt, updatedAt]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Clients retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    
    post:
      tags: [Clients]
      summary: Create client
      description: Create a new client (individual or company)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientRequest'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Client with email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'

  /clients/{id}:
    get:
      tags: [Clients]
      summary: Get client by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Client retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Client'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    
    put:
      tags: [Clients]
      summary: Update client
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    
    delete:
      tags: [Clients]
      summary: Delete client
      description: Soft delete a client (sets deletedAt timestamp)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Client deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  # Booking Management
  /bookings:
    get:
      tags: [Bookings]
      summary: List bookings
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: clientId
          in: query
          description: Filter by client ID
          schema:
            type: string
        - name: spaceId
          in: query
          description: Filter by space ID
          schema:
            type: string
        - name: status
          in: query
          description: Filter by booking status
          schema:
            $ref: '#/components/schemas/BookingStatus'
        - name: startDate
          in: query
          description: Filter bookings starting from date (ISO format)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter bookings ending before date (ISO format)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    
    post:
      tags: [Bookings]
      summary: Create booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Booking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Booking conflict detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Invoice Management
  /invoices:
    get:
      tags: [Invoices]
      summary: List invoices
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: clientId
          in: query
          description: Filter by client ID
          schema:
            type: string
        - name: status
          in: query
          description: Filter by invoice status
          schema:
            $ref: '#/components/schemas/InvoiceStatus'
        - name: startDate
          in: query
          description: Filter by invoice date from
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Filter by invoice date to
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Invoices retrieved successfully
    
    post:
      tags: [Invoices]
      summary: Create invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceRequest'
      responses:
        '201':
          description: Invoice created successfully

  # Membership Management
  /memberships:
    get:
      tags: [Memberships]
      summary: List memberships
      responses:
        '200':
          description: Memberships retrieved successfully
    
    post:
      tags: [Memberships]
      summary: Create membership
      responses:
        '201':
          description: Membership created successfully

  # Notification Management
  /notifications:
    get:
      tags: [Notifications]
      summary: List notifications
      responses:
        '200':
          description: Notifications retrieved successfully
    
    post:
      tags: [Notifications]
      summary: Send notification
      responses:
        '201':
          description: Notification sent successfully

  # Report Management
  /reports:
    get:
      tags: [Reports]
      summary: List reports
      responses:
        '200':
          description: Reports retrieved successfully
    
    post:
      tags: [Reports]
      summary: Generate report
      responses:
        '201':
          description: Report generated successfully

  # Integration Management
  /integrations/api-keys:
    get:
      tags: [Integrations]
      summary: List API keys
      responses:
        '200':
          description: API keys retrieved successfully
    
    post:
      tags: [Integrations]
      summary: Create API key
      responses:
        '201':
          description: API key created successfully

  /integrations/webhooks:
    get:
      tags: [Integrations]
      summary: List webhooks
      responses:
        '200':
          description: Webhooks retrieved successfully
    
    post:
      tags: [Integrations]
      summary: Create webhook
      responses:
        '201':
          description: Webhook created successfully

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Core Entities
    Client:
      type: object
      properties:
        id:
          type: string
          description: Unique client identifier
        tenantId:
          type: string
          description: Tenant identifier
        name:
          type: string
          description: Client name
        email:
          type: string
          format: email
          description: Client email address
        phone:
          type: string
          nullable: true
          description: Client phone number
        type:
          $ref: '#/components/schemas/ClientType'
        status:
          $ref: '#/components/schemas/ClientStatus'
        address:
          $ref: '#/components/schemas/Address'
        metadata:
          type: object
          nullable: true
          description: Additional client data stored as JSON
        tags:
          type: array
          items:
            type: string
          description: Client tags for categorization
        companyDetails:
          $ref: '#/components/schemas/CompanyDetails'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
          nullable: true

    Booking:
      type: object
      properties:
        id:
          type: string
        tenantId:
          type: string
        clientId:
          type: string
        spaceId:
          type: string
        status:
          $ref: '#/components/schemas/BookingStatus'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        totalAmount:
          type: number
          format: decimal
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Enums
    ClientType:
      type: string
      enum: [INDIVIDUAL, COMPANY]
      description: Type of client

    ClientStatus:
      type: string
      enum: [ACTIVE, INACTIVE, SUSPENDED, PENDING]
      description: Client status

    BookingStatus:
      type: string
      enum: [PENDING, CONFIRMED, IN_PROGRESS, COMPLETED, CANCELLED, NO_SHOW]
      description: Booking status

    InvoiceStatus:
      type: string
      enum: [DRAFT, SENT, PAID, OVERDUE, CANCELLED]
      description: Invoice status

    # Nested Objects
    Address:
      type: object
      properties:
        street:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        zipCode:
          type: string
          nullable: true
        country:
          type: string
          nullable: true

    CompanyDetails:
      type: object
      nullable: true
      properties:
        industry:
          type: string
          nullable: true
        employeeCount:
          type: integer
          nullable: true
        website:
          type: string
          nullable: true
        annualRevenue:
          type: number
          format: decimal
          nullable: true

    # Request/Response Objects
    CreateClientRequest:
      type: object
      required:
        - name
        - email
        - type
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        email:
          type: string
          format: email
        phone:
          type: string
          maxLength: 20
        type:
          $ref: '#/components/schemas/ClientType'
        status:
          $ref: '#/components/schemas/ClientStatus'
          default: ACTIVE
        address:
          $ref: '#/components/schemas/Address'
        metadata:
          type: object
        tags:
          type: array
          items:
            type: string
        companyDetails:
          $ref: '#/components/schemas/CompanyDetails'

    UpdateClientRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        email:
          type: string
          format: email
        phone:
          type: string
          maxLength: 20
        type:
          $ref: '#/components/schemas/ClientType'
        status:
          $ref: '#/components/schemas/ClientStatus'
        address:
          $ref: '#/components/schemas/Address'
        metadata:
          type: object
        tags:
          type: array
          items:
            type: string
        companyDetails:
          $ref: '#/components/schemas/CompanyDetails'

    CreateBookingRequest:
      type: object
      required:
        - clientId
        - spaceId
        - startTime
        - endTime
      properties:
        clientId:
          type: string
        spaceId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        notes:
          type: string

    CreateInvoiceRequest:
      type: object
      required:
        - clientId
        - dueDate
        - items
      properties:
        clientId:
          type: string
        dueDate:
          type: string
          format: date
        items:
          type: array
          items:
            type: object
            properties:
              description:
                type: string
              quantity:
                type: number
              unitPrice:
                type: number
                format: decimal
        notes:
          type: string

    # Common Response Objects
    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
          minimum: 0
        pages:
          type: integer
          minimum: 0

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Validation failed"
            details:
              name: "Name is required"
              email: "Invalid email format"

    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Unauthorized access"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Resource not found"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Internal server error"

tags:
  - name: Clients
    description: Client management operations
  - name: Bookings
    description: Booking and reservation management
  - name: Invoices
    description: Invoice and billing management
  - name: Memberships
    description: Membership and subscription management
  - name: Notifications
    description: Notification and communication management
  - name: Reports
    description: Reporting and analytics
  - name: Integrations
    description: API keys and webhook management